#!/usr/bin/env python3

import logging
import os
import psutil
import random
import time
from logging import config as logging_config
from typing import Any

import boto3
import hvac
from fastapi import HTTPException, Depends, FastAPI, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel

from aws_auth import AWSAuth
from basic_auth import BasicAuth

VAULT_ADDR = os.environ.get("VAULT_ADDR")
VAULT_TOKEN = os.environ.get("VAULT_TOKEN")
AWS_STS_ENDPOINT = os.environ.get("AWS_STS_ENDPOINT")
LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO")

# for maunal testing
# LOG_LEVEL = "DEBUG"
# VAULT_ADDR = "http://127.0.0.1:8000"
# VAULT_TOKEN = "s.1J5Z1Z1Z1Z1Z1Z1Z1Z1Z1Z1Z"

match LOG_LEVEL:
    case "DEBUG":
        LOG_LEVEL = logging.DEBUG
    case "INFO":
        LOG_LEVEL = logging.INFO
    case "WARNING":
        LOG_LEVEL = logging.WARNING
    case "ERROR":
        LOG_LEVEL = logging.ERROR
    case "CRITICAL":
        LOG_LEVEL = logging.CRITICAL
    case _:
        raise ValueError(f"LOG_LEVEL {LOG_LEVEL} not supported")

logging_config.fileConfig("logging.conf", disable_existing_loggers=False)
logger = logging.getLogger(__name__)
logger.setLevel(LOG_LEVEL)

app = FastAPI()


class VaultRequest(BaseModel):
    credential_id: str
    role: str


class ResponseError(BaseModel):
    detail: str


@app.middleware("http")
async def middleware_requests(request: Request, call_next):
    """Middleware for logging requests

    Args:
        request (Request): request object
        call_next (_type_): next call

    Raises:
        e: exception generated by call_next

    Returns:
        Response: Response object from call_next
    """
    ascii_char_choices = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    ascii_char_digits = "0123456789"
    idem = "".join(random.choices(f"{ascii_char_choices}{ascii_char_digits}", k=5))
    base_log_msg = f"request_id={idem} method={request.method} path={request.url.path}"
    base_log_msg += f" remote_addr={request.client}"

    logger.info(base_log_msg)

    start_time = time.time()
    try:
        response = await call_next(request)
    except Exception as e:
        logger.error(f"{base_log_msg} error={e}")
        raise e
    process_time = time.time() - start_time

    logger.info(
        f"{base_log_msg} status_code={response.status_code} ms_process_time={process_time}"
    )
    return response


@app.get("/api/v1/health")
def read_health():
    """check health of service

    Returns:
        Dict: Dict with health information: cpu_percent, memory_percent, disk_percent
    """
    logger.debug(f"check health called")

    cpu_percent = psutil.cpu_percent()
    memory_info = psutil.virtual_memory()
    memory_percent = memory_info.percent
    disk_info = psutil.disk_usage("/")
    disk_percent = disk_info.percent

    return {
        "status": "alive",
        "cpu_percent": cpu_percent,
        "memory_percent": memory_percent,
        "disk_percent": disk_percent,
    }


@app.post(
    "/api/v1/token_login/credential/",
    responses={
        409: {
            "description": "request failed",
            "model": ResponseError,
        },
        404: {
            "description": "secret not found",
            "model": ResponseError,
        },
        200: {
            "description": "request success. The secret is returned in the response body in JSON format. The format of the response is determined by the type of secret stored in the path.",
            "model": Any,
        },
    },
    dependencies=[Depends(BasicAuth())],
)
def read_vault_by_token(vault_request: VaultRequest) -> Any:
    """Read secret from vault using token authentication

    Args:
        vault_request (VaultRequest): VaultRequest object

    Raises:
        HTTPException: if server misconfiguration
        HTTPException: if get secret failed

    Returns:
        Any: secret from vault
    """
    if not VAULT_ADDR or not VAULT_TOKEN:
        logger.error(f"VAULT_ADDR or VAULT_TOKEN not set")
        raise HTTPException(status_code=409, detail="misconfiguration")
    if not VAULT_TOKEN:
        logger.error(f"VAULT_TOKEN not set")
        raise HTTPException(status_code=409, detail="misconfiguration")

    logger.debug(f" try to authenticate to vault {VAULT_ADDR}")
    try:
        client = hvac.Client(url=VAULT_ADDR, token=VAULT_TOKEN)
    except Exception as e:
        logger.error(f"Vault authentication failed: {e}")
        raise HTTPException(
            status_code=409,
            detail="Error in vault request",
        )

    if not client.is_authenticated():
        logger.error(f"Vault authentication failed")
        raise HTTPException(
            status_code=409,
            detail="Error in vault authentication",
        )
    logger.debug(f"Vault authentication success")

    logger.debug(f" try to read secret {vault_request.credential_id}")
    try:
        return_vault = client.read(vault_request.credential_id)
    except Exception as e:
        logger.error(f"get secret failed: {e}")
        raise HTTPException(
            status_code=409,
            detail="Error in read secret",
        )
    if not return_vault:
        logger.error(f"get secret failed")
        raise HTTPException(
            status_code=404,
            detail="secret not found",
        )
    return_content = return_vault["data"]
    return return_content


@app.post(
    "/api/v1/aws_login/credential/",
    responses={
        409: {
            "description": "request failed",
            "model": ResponseError,
        }
    },
    dependencies=[Depends(AWSAuth())],
)
def read_vault_by_aws(vault_request: VaultRequest):
    logger.debug(f"try to sign request to {AWS_STS_ENDPOINT}")
    aws_access_key_id = os.environ.get("AWS_ACCESS_KEY")
    if not aws_access_key_id:
        logger.error(f"AWS_ACCESS_KEY not set")
        raise HTTPException(status_code=409, detail="misconfiguration")
    aws_secret_access_key = os.environ.get("AWS_SECRET_KEY")
    if not aws_secret_access_key:
        logger.error(f"AWS_SECRET_KEY not set")
        raise HTTPException(status_code=409, detail="misconfiguration")
    aws_region_name = os.environ.get("AWS_REGION")
    if not aws_region_name:
        logger.error(f"AWS_REGION not set")
        raise HTTPException(status_code=409, detail="misconfiguration")

    session = boto3.Session(
        aws_access_key_id=aws_access_key_id,
        aws_secret_access_key=aws_secret_access_key,
        region_name=aws_region_name,
    )
    logger.debug(f"AWS session created: {session}")
    credentials = session.get_credentials()

    logger.debug(f"try to authenticate to vault {VAULT_ADDR}")
    vault_client = hvac.Client(url=VAULT_ADDR)
    vault_client.auth.aws.iam_login(
        credentials.access_key,
        credentials.secret_key,
        credentials.token,
    )
    if not vault_client.is_authenticated():
        return {"error": "Vault authentication failed"}
    logger.debug(f"Vault authentication success")

    logger.debug(f"try to read secret {vault_request.credential_id}")
    result_vault_request = vault_client.read(path=vault_request.credential_id)
    logger.debug(f"successfully read secret {vault_request.credential_id}")

    return result_vault_request
